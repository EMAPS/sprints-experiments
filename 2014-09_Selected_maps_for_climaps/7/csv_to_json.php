<?php

ini_set('memory_limit', '2G');
$datadir = "data";
$jsons = array();
//oecd_to_json();
//climatefundsupdate_to_json();
napa_to_json();

// put oecd riomarkers into json format
// map sectors to undp_alm scheme
function oecd_to_json() {
    global $datadir, $jsons;
    $file = file($datadir . "/RioMarkers_cleaned.txt");
    $fc = count($file);
    $jsons = array();
    for ($i = 1; $i < $fc; $i++) {
        $e = explode("|", $file[$i]);
        if ($e[12] == 2) {
            $obj = new StdClass();
            //*Year, ^*donornameE, ^*agencynameE, *usd_commitment, usd_commitment_defl, ^*recipientnameE, purposecode, ^*purposename_e, shortdescription, environment, biodiversity, climateMitigation, climateAdaptation, desertification, ^*RegionNameE, ^*IncomeGroupNameE, flowname_e, aid_T_description_e, Sector, ^*SectorNameE, ChannelNameE, ChannelReportedNameE, geography, *projecttitle, longdescription, gender, Free-standing Technical Co-operation, Programme Based Approaches, investmentproject, *crsid, *projectnumber 
            $obj->donornameE = trim($e[1]);
            $obj->agencynameE = trim($e[2]);
            $obj->recipientnameE = trim($e[5]);
            $obj->purposename_e = trim($e[7]);
            $obj->RegionNameE = trim($e[14]);
            $obj->IncomeGroupNameE = trim($e[15]);
            $obj->SectorNameE = trim(strtolower($e[19]));
            $obj->sector = $obj->SectorNameE;
            $obj->source = "oecd_riomarkers";
            $jsons[] = $obj;
        }
    }
    mapSectors();
    file_put_contents("data/oecd.json", json_encode($jsons, JSON_PRETTY_PRINT));
}

function climatefundsupdate_to_json() {
    global $jsons, $datadir;
    $jsons = array();
    $inputfile = "climatefundsupdate-multilateral.csv";
    $file = file($datadir . "/" . $inputfile);
    $cf = count($file);
    for ($i = 1; $i < $cf; $i++) {
        $obj = new StdClass;
        $obj->source = "climatefundsupdate";

        ////*Id, Keyword_01, Keyword_02, Keyword_03, Keyword_04, Keyword_05, Tag_01, Tag_02, Tag_03, Tag_04, Tag_05, Tag_06, *category (sector), *Checked keyword_01, *Checked keyword_02, *Checked keyword_03, *Project, ^*Focus, ^*Financial Instrument, ^*Country, ^*Country Income Level, ^*Region, ^*Funder, *Approved Year, *Fund First Disbursed, ^*Implementor, *Approved, *Disbursed 


        $e = explode(";", $file[$i]);
        $sectors = explode("/", $e[12]); // category
        foreach ($sectors as $s)
            $obj->sector[] = trim(strtolower($s));
        $obj->focus = trim($e[17]);
        $obj->financial_instrument = trim($e[18]);
        $obj->recipient = trim($e[19]);
        $obj->recipient_income_level = trim($e[20]);
        $obj->region = trim($e[21]);
        $obj->donor = trim($e[22]);
        $obj->year = $e[23];
        $obj->implementor = $e[25];

        $jsons[] = $obj;
    }
    mapSectors();
    file_put_contents("data/climatefundsupdate.json", json_encode($jsons, JSON_PRETTY_PRINT));
}

function napa_to_json() {
    global $jsons, $datadir;
    $jsons = array();
    $inputfile = "napa-full-categories.csv";
    $file = file($datadir . "/" . $inputfile);
    $cf = count($file);
    for ($i = 1; $i < $cf; $i++) {
        $e = explode(";", $file[$i]);
        $obj = new stdClass();
        $obj->source = "napa";
        $obj->recipient = trim($e[2]);
        /* $keywords = explode(",", $e[7]); // official key words
          foreach ($keywords as $keyword)
          $obj->keywords[] = trim($keyword);
         */
        $sectors = explode("/", $e[1]); // category
        foreach ($sectors as $s)
            $obj->sector[] = trim(strtolower($s));
        $jsons[] = $obj;
    }
    mapSectors();
    file_put_contents("data/napa.json", json_encode($jsons, JSON_PRETTY_PRINT));
}

function mapSectors() {
    global $jsons, $datadir;
    $file = file($datadir . "/substance_of_adaptation_mapping_of_sectors.csv"); // generated by manually mapping all sectors to the undp_alm scheme, see also @todo
    $sc = count($file);
    for ($i = 1; $i < $sc; $i++) {
        $e = explode(";", $file[$i]);
        $source = trim($e[0]);
        $sector = trim($e[1]);
        $sector_mapped = trim($e[2]);
        $sector_mappings[$source][$sector] = $sector_mapped;
    }
    foreach ($jsons as $k => $obj) {
        $obj->sector_mapped = array();
        if (is_array($obj->sector)) {
            foreach ($obj->sector as $l => $sector) {
                $obj->sector_mapped[$l] = $sector_mappings[$obj->source][$sector];
                $jsons[$k] = $obj;
            }
        } else {
            $obj->sector_mapped[] = $sector_mappings[$obj->source][$obj->sector];
            $jsons[$k] = $obj;
        }
    }
}

?>
